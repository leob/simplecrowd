class Project < ActiveRecord::Base
   belongs_to :owner, :class_name => 'User', :foreign_key => 'user_id'
   belongs_to :category    #, :class_name => 'Category', :foreign_key => 'category_id'

   # Pagination
   paginates_per 30

   validates :name, presence: true, length: { maximum: 50 }
   validates :category, presence: true
   validates :summary, presence: true, length: { maximum: 250 }
   validates :description, presence: true

   monetize :target_amount_cents, :collected_amount_cents

   has_attached_file :image,
                     :styles => {
                         :prethumb => ["223x162>", :jpg],
                         :thumb => ["140x140!", :jpg]
                     },
                     :convert_options => {
                         :all => "-quality 75 -strip"
                     }

   validates_attachment :image, #:presence => true,
                        :content_type => {content_type: ["image/jpeg", "image/gif", "image/png"],
                                          message: ': ' + I18n.t('forms.errors.invalid_file_type')},
                        :size => {in: 0..8.megabytes,
                                  message: ': ' + I18n.t('forms.errors.invalid_file_size', size_mb: 8)}

   after_validation :clean_paperclip_errors

   #
   # 'Randomize file name': technique taken from http://trevorturk.com/2009/03/22/randomize-filename-in-paperclip/
   #
   before_create :randomize_file_name
   # NOTE: also do this "before_update" ??

   def randomize_file_name
       extension = File.extname(image_file_name).downcase
       self.image.instance_write(:file_name, "#{SecureRandom.hex(16)}#{extension}")
   end

   #
   # Clean the validation errors generated by Paperclip, see:
   #
   # http://stackoverflow.com/questions/19933579/ruby-on-rails-4-duplicate-paperclip-validation-messages
   #
   def clean_paperclip_errors
      errors.delete(:image_file_size)
      errors.delete(:image_content_type)
   end

   # VIRTUAL PROPERTIES (calculated fields)

   def days_to_go
      project_end_date = self.end_date || Time.now
      project_start_date = self.start_date || project_end_date

      [project_end_date.at_beginning_of_day - project_start_date.at_beginning_of_day, 0].max.to_i
   end

   def percentage
      return 0 if self.target_amount.cents <= 0

      ((self.collected_amount * 100) / self.target_amount).to_i
   end

   # SCOPE, ORDER, PAGING

   def self.selected_projects(nr_projects = 12)
      where(editor_pick: true, draft: false, disabled: false)
          .order(created_at: :desc)
          .limit(nr_projects)
   end

   # # Scopes
   # scope :editor_picks, -> {
   #                       where(editor_pick: true)
   #                           .order("updated_at DESC")
   # }

   #scope :by_name, -> { order("name ASC") }

   def self.default_order()
      order(name: :asc)
   end

   def self.paged(page_number)
      self.default_order().page page_number
   end

   def self.search_and_order(search, page_number)
      if search
         where("name LIKE ?", "%#{search.downcase}%").default_order().page page_number
      else
         self.paged(page_number)
      end
   end
end
